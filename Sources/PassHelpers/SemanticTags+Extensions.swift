// SemanticTags+Extensions.swift
// Copyright (c) 2025 hiimtmac inc.

import Foundation
import PassCore

extension SemanticTags {
    public static func eventSemantics(
        additionalTicketAttributes: String? = nil,
        admissionLevel: String? = nil,
        admissionLevelAbbreviation: String? = nil,
        albumIDs: [String]? = nil,
        artistIDs: [String]? = nil,
        attendeeName: String? = nil,
        duration: Int? = nil,
        entranceDescription: String? = nil,
        eventEndDate: Date? = nil,
        eventName: String? = nil,
        eventStartDate: Date? = nil,
        eventStartDateInfo: SemanticTagType.EventDateInfo? = nil,
        eventType: EventType? = nil,
        genre: String? = nil,
        performerNames: [String]? = nil,
        playlistIDs: [String]? = nil,
        seats: [SemanticTagType.Seat]? = nil,
        securityScreening: String? = nil,
        silenceRequested: Bool? = nil,
        tailgatingAllowed: Bool? = nil,
        totalPrice: SemanticTagType.CurrencyAmount? = nil,
        venueBoxOfficeOpenDate: Date? = nil,
        venueCloseDate: Date? = nil,
        venueDoorsOpenDate: Date? = nil,
        venueEntrance: String? = nil,
        venueEntranceDoor: String? = nil,
        venueEntranceGate: String? = nil,
        venueEntrancePortal: String? = nil,
        venueFanZoneOpenDate: Date? = nil,
        venueGatesOpenDate: Date? = nil,
        venueLocation: SemanticTagType.Location? = nil,
        venueName: String? = nil,
        venueOpenDate: Date? = nil,
        venueParkingLotsOpenDate: Date? = nil,
        venuePhoneNumber: String? = nil,
        venueRegionName: String? = nil,
        venueRoom: String? = nil,
        wifiAccess: [SemanticTagType.WifiNetwork]? = nil
    ) -> Self {
        self.init(
            additionalTicketAttributes: additionalTicketAttributes,
            admissionLevel: admissionLevel,
            admissionLevelAbbreviation: admissionLevelAbbreviation,
            albumIDs: albumIDs,
            artistIDs: artistIDs,
            attendeeName: attendeeName,
            duration: duration,
            entranceDescription: entranceDescription,
            eventEndDate: eventEndDate,
            eventName: eventName,
            eventStartDate: eventStartDate,
            eventStartDateInfo: eventStartDateInfo,
            eventType: eventType,
            genre: genre,
            performerNames: performerNames,
            playlistIDs: playlistIDs,
            seats: seats,
            securityScreening: securityScreening,
            silenceRequested: silenceRequested,
            tailgatingAllowed: tailgatingAllowed,
            totalPrice: totalPrice,
            venueBoxOfficeOpenDate: venueBoxOfficeOpenDate,
            venueCloseDate: venueCloseDate,
            venueDoorsOpenDate: venueDoorsOpenDate,
            venueEntrance: venueEntrance,
            venueEntranceDoor: venueEntranceDoor,
            venueEntranceGate: venueEntranceGate,
            venueEntrancePortal: venueEntrancePortal,
            venueFanZoneOpenDate: venueFanZoneOpenDate,
            venueGatesOpenDate: venueGatesOpenDate,
            venueLocation: venueLocation,
            venueName: venueName,
            venueOpenDate: venueOpenDate,
            venueParkingLotsOpenDate: venueParkingLotsOpenDate,
            venuePhoneNumber: venuePhoneNumber,
            venueRegionName: venueRegionName,
            venueRoom: venueRoom,
            wifiAccess: wifiAccess
        )
    }

    public static func sportsEventSemantics(
        additionalTicketAttributes: String? = nil,
        admissionLevel: String? = nil,
        admissionLevelAbbreviation: String? = nil,
        attendeeName: String? = nil,
        awayTeamAbbreviation: String? = nil,
        awayTeamLocation: String? = nil,
        awayTeamName: String? = nil,
        duration: Int? = nil,
        entranceDescription: String? = nil,
        eventEndDate: Date? = nil,
        eventName: String? = nil,
        eventStartDate: Date? = nil,
        eventStartDateInfo: SemanticTagType.EventDateInfo? = nil,
        homeTeamAbbreviation: String? = nil,
        homeTeamLocation: String? = nil,
        homeTeamName: String? = nil,
        leagueAbbreviation: String? = nil,
        leagueName: String? = nil,
        seats: [SemanticTagType.Seat]? = nil,
        securityScreening: String? = nil,
        silenceRequested: Bool? = nil,
        sportName: String? = nil,
        tailgatingAllowed: Bool? = nil,
        totalPrice: SemanticTagType.CurrencyAmount? = nil,
        venueBoxOfficeOpenDate: Date? = nil,
        venueCloseDate: Date? = nil,
        venueDoorsOpenDate: Date? = nil,
        venueEntrance: String? = nil,
        venueEntranceDoor: String? = nil,
        venueEntranceGate: String? = nil,
        venueEntrancePortal: String? = nil,
        venueFanZoneOpenDate: Date? = nil,
        venueGatesOpenDate: Date? = nil,
        venueLocation: SemanticTagType.Location? = nil,
        venueName: String? = nil,
        venueOpenDate: Date? = nil,
        venueParkingLotsOpenDate: Date? = nil,
        venuePhoneNumber: String? = nil,
        venueRegionName: String? = nil,
        venueRoom: String? = nil,
        wifiAccess: [SemanticTagType.WifiNetwork]? = nil
    ) -> Self {
        self.init(
            additionalTicketAttributes: additionalTicketAttributes,
            admissionLevel: admissionLevel,
            admissionLevelAbbreviation: admissionLevelAbbreviation,
            attendeeName: attendeeName,
            awayTeamAbbreviation: awayTeamAbbreviation,
            awayTeamLocation: awayTeamLocation,
            awayTeamName: awayTeamName,
            duration: duration,
            entranceDescription: entranceDescription,
            eventEndDate: eventEndDate,
            eventName: eventName,
            eventStartDate: eventStartDate,
            eventStartDateInfo: eventStartDateInfo,
            eventType: .sports,
            homeTeamAbbreviation: homeTeamAbbreviation,
            homeTeamLocation: homeTeamLocation,
            homeTeamName: homeTeamName,
            leagueAbbreviation: leagueAbbreviation,
            leagueName: leagueName,
            seats: seats,
            securityScreening: securityScreening,
            silenceRequested: silenceRequested,
            sportName: sportName,
            tailgatingAllowed: tailgatingAllowed,
            totalPrice: totalPrice,
            venueBoxOfficeOpenDate: venueBoxOfficeOpenDate,
            venueCloseDate: venueCloseDate,
            venueDoorsOpenDate: venueDoorsOpenDate,
            venueEntrance: venueEntrance,
            venueEntranceDoor: venueEntranceDoor,
            venueEntranceGate: venueEntranceGate,
            venueEntrancePortal: venueEntrancePortal,
            venueFanZoneOpenDate: venueFanZoneOpenDate,
            venueGatesOpenDate: venueGatesOpenDate,
            venueLocation: venueLocation,
            venueName: venueName,
            venueOpenDate: venueOpenDate,
            venueParkingLotsOpenDate: venueParkingLotsOpenDate,
            venuePhoneNumber: venuePhoneNumber,
            venueRegionName: venueRegionName,
            venueRoom: venueRoom,
            wifiAccess: wifiAccess
        )
    }
    
    public static func boardingSemantics(
        boardingGroup: String? = nil,
        boardingSequenceNumber: String? = nil,
        boardingZone: String? = nil,
        confirmationNumber: String? = nil,
        currentArrivalDate: Date? = nil,
        currentBoardingDate: Date? = nil,
        currentDepartureDate: Date? = nil,
        departureCityName: String? = nil,
        departureGate: String? = nil,
        departureLocation: SemanticTagType.Location? = nil,
        departureLocationDescription: String? = nil,
        departureLocationSecurityPrograms: [TransitSecurityProgram]? = nil,
        departureLocationTimeZone: String? = nil,
        destinationCityName: String? = nil,
        destinationGate: String? = nil,
        destinationLocation: SemanticTagType.Location? = nil,
        destinationLocationDescription: String? = nil,
        destinationLocationSecurityPrograms: [TransitSecurityProgram]? = nil,
        destinationLocationTimeZone: String? = nil,
        duration: Int? = nil,
        internationalDocumentsAreVerified: Bool? = nil,
        internationalDocumentsVerifiedDeclarationName: String? = nil,
        loungePlaceIDs: [String]? = nil,
        membershipProgramName: String? = nil,
        membershipProgramNumber: String? = nil,
        membershipProgramStatus: String? = nil,
        originalArrivalDate: Date? = nil,
        originalBoardingDate: Date? = nil,
        originalDepartureDate: Date? = nil,
        passengerEligibleSecurityPrograms: [TransitSecurityProgram]? = nil,
        passengerName: SemanticTagType.PersonNameComponents? = nil,
        priorityStatus: String? = nil,
        seats: [SemanticTagType.Seat]? = nil,
        securityScreening: String? = nil,
        silenceRequested: Bool? = nil,
        ticketFareClass: String? = nil,
        totalPrice: SemanticTagType.CurrencyAmount? = nil,
        transitProvider: String? = nil,
        transitStatus: String? = nil,
        transitStatusReason: String? = nil,
        vehicleName: String? = nil,
        vehicleNumber: String? = nil,
        vehicleType: String? = nil,
        wifiAccess: [SemanticTagType.WifiNetwork]? = nil
    ) -> Self {
        self.init(
            boardingGroup: boardingGroup,
            boardingSequenceNumber: boardingSequenceNumber,
            boardingZone: boardingZone,
            confirmationNumber: confirmationNumber,
            currentArrivalDate: currentArrivalDate,
            currentBoardingDate: currentBoardingDate,
            currentDepartureDate: currentDepartureDate,
            departureCityName: departureCityName,
            departureGate: departureGate,
            departureLocation: departureLocation,
            departureLocationDescription: departureLocationDescription,
            departureLocationSecurityPrograms: departureLocationSecurityPrograms,
            departureLocationTimeZone: departureLocationTimeZone,
            destinationCityName: destinationCityName,
            destinationGate: destinationGate,
            destinationLocation: destinationLocation,
            destinationLocationDescription: destinationLocationDescription,
            destinationLocationSecurityPrograms: destinationLocationSecurityPrograms,
            destinationLocationTimeZone: destinationLocationTimeZone,
            duration: duration,
            internationalDocumentsAreVerified: internationalDocumentsAreVerified,
            internationalDocumentsVerifiedDeclarationName: internationalDocumentsVerifiedDeclarationName,
            loungePlaceIDs: loungePlaceIDs,
            membershipProgramName: membershipProgramName,
            membershipProgramNumber: membershipProgramNumber,
            membershipProgramStatus: membershipProgramStatus,
            originalArrivalDate: originalArrivalDate,
            originalBoardingDate: originalBoardingDate,
            originalDepartureDate: originalDepartureDate,
            passengerEligibleSecurityPrograms: passengerEligibleSecurityPrograms,
            passengerName: passengerName,
            priorityStatus: priorityStatus,
            seats: seats,
            securityScreening: securityScreening,
            silenceRequested: silenceRequested,
            ticketFareClass: ticketFareClass,
            totalPrice: totalPrice,
            transitProvider: transitProvider,
            transitStatus: transitStatus,
            transitStatusReason: transitStatusReason,
            vehicleName: vehicleName,
            vehicleNumber: vehicleNumber,
            vehicleType: vehicleType,
            wifiAccess: wifiAccess
        )
    }

    public static func railBoardingSemantics(
        boardingGroup: String? = nil,
        boardingSequenceNumber: String? = nil,
        boardingZone: String? = nil,
        carNumber: String? = nil,
        confirmationNumber: String? = nil,
        currentArrivalDate: Date? = nil,
        currentBoardingDate: Date? = nil,
        currentDepartureDate: Date? = nil,
        departureCityName: String? = nil,
        departureGate: String? = nil,
        departureLocation: SemanticTagType.Location? = nil,
        departureLocationDescription: String? = nil,
        departureLocationSecurityPrograms: [TransitSecurityProgram]? = nil,
        departureLocationTimeZone: String? = nil,
        departurePlatform: String? = nil,
        departureStationName: String? = nil,
        destinationCityName: String? = nil,
        destinationGate: String? = nil,
        destinationLocation: SemanticTagType.Location? = nil,
        destinationLocationDescription: String? = nil,
        destinationLocationSecurityPrograms: [TransitSecurityProgram]? = nil,
        destinationLocationTimeZone: String? = nil,
        destinationPlatform: String? = nil,
        destinationStationName: String? = nil,
        duration: Int? = nil,
        internationalDocumentsAreVerified: Bool? = nil,
        internationalDocumentsVerifiedDeclarationName: String? = nil,
        loungePlaceIDs: [String]? = nil,
        membershipProgramName: String? = nil,
        membershipProgramNumber: String? = nil,
        membershipProgramStatus: String? = nil,
        originalArrivalDate: Date? = nil,
        originalBoardingDate: Date? = nil,
        originalDepartureDate: Date? = nil,
        passengerEligibleSecurityPrograms: [TransitSecurityProgram]? = nil,
        passengerName: SemanticTagType.PersonNameComponents? = nil,
        priorityStatus: String? = nil,
        seats: [SemanticTagType.Seat]? = nil,
        securityScreening: String? = nil,
        silenceRequested: Bool? = nil,
        ticketFareClass: String? = nil,
        totalPrice: SemanticTagType.CurrencyAmount? = nil,
        transitProvider: String? = nil,
        transitStatus: String? = nil,
        transitStatusReason: String? = nil,
        vehicleName: String? = nil,
        vehicleNumber: String? = nil,
        vehicleType: String? = nil,
        wifiAccess: [SemanticTagType.WifiNetwork]? = nil
    ) -> Self {
        self.init(
            boardingGroup: boardingGroup,
            boardingSequenceNumber: boardingSequenceNumber,
            boardingZone: boardingZone,
            carNumber: carNumber,
            confirmationNumber: confirmationNumber,
            currentArrivalDate: currentArrivalDate,
            currentBoardingDate: currentBoardingDate,
            currentDepartureDate: currentDepartureDate,
            departureCityName: departureCityName,
            departureGate: departureGate,
            departureLocation: departureLocation,
            departureLocationDescription: departureLocationDescription,
            departureLocationSecurityPrograms: departureLocationSecurityPrograms,
            departureLocationTimeZone: departureLocationTimeZone,
            departurePlatform: departurePlatform,
            departureStationName: departureStationName,
            destinationCityName: destinationCityName,
            destinationGate: destinationGate,
            destinationLocation: destinationLocation,
            destinationLocationDescription: destinationLocationDescription,
            destinationLocationSecurityPrograms: destinationLocationSecurityPrograms,
            destinationLocationTimeZone: destinationLocationTimeZone,
            destinationPlatform: destinationPlatform,
            destinationStationName: destinationStationName,
            duration: duration,
            internationalDocumentsAreVerified: internationalDocumentsAreVerified,
            internationalDocumentsVerifiedDeclarationName: internationalDocumentsVerifiedDeclarationName,
            loungePlaceIDs: loungePlaceIDs,
            membershipProgramName: membershipProgramName,
            membershipProgramNumber: membershipProgramNumber,
            membershipProgramStatus: membershipProgramStatus,
            originalArrivalDate: originalArrivalDate,
            originalBoardingDate: originalBoardingDate,
            originalDepartureDate: originalDepartureDate,
            passengerEligibleSecurityPrograms: passengerEligibleSecurityPrograms,
            passengerName: passengerName,
            priorityStatus: priorityStatus,
            seats: seats,
            securityScreening: securityScreening,
            silenceRequested: silenceRequested,
            ticketFareClass: ticketFareClass,
            totalPrice: totalPrice,
            transitProvider: transitProvider,
            transitStatus: transitStatus,
            transitStatusReason: transitStatusReason,
            vehicleName: vehicleName,
            vehicleNumber: vehicleNumber,
            vehicleType: vehicleType,
            wifiAccess: wifiAccess
        )
    }

    public static func airlineBoardingSemantics(
        airlineCode: String? = nil,
        boardingGroup: String? = nil,
        boardingSequenceNumber: String? = nil,
        boardingZone: String? = nil,
        confirmationNumber: String? = nil,
        currentArrivalDate: Date? = nil,
        currentBoardingDate: Date? = nil,
        currentDepartureDate: Date? = nil,
        departureAirportCode: String? = nil,
        departureAirportName: String? = nil,
        departureCityName: String? = nil,
        departureGate: String? = nil,
        departureLocation: SemanticTagType.Location? = nil,
        departureLocationDescription: String? = nil,
        departureLocationSecurityPrograms: [TransitSecurityProgram]? = nil,
        departureLocationTimeZone: String? = nil,
        departureTerminal: String? = nil,
        destinationAirportCode: String? = nil,
        destinationAirportName: String? = nil,
        destinationCityName: String? = nil,
        destinationGate: String? = nil,
        destinationLocation: SemanticTagType.Location? = nil,
        destinationLocationDescription: String? = nil,
        destinationLocationSecurityPrograms: [TransitSecurityProgram]? = nil,
        destinationLocationTimeZone: String? = nil,
        destinationTerminal: String? = nil,
        duration: Int? = nil,
        flightCode: String? = nil,
        flightNumber: Int? = nil,
        internationalDocumentsAreVerified: Bool? = nil,
        internationalDocumentsVerifiedDeclarationName: String? = nil,
        loungePlaceIDs: [String]? = nil,
        membershipProgramName: String? = nil,
        membershipProgramNumber: String? = nil,
        membershipProgramStatus: String? = nil,
        originalArrivalDate: Date? = nil,
        originalBoardingDate: Date? = nil,
        originalDepartureDate: Date? = nil,
        passengerAirlineSSRs: [String]? = nil,
        passengerCapabilities: [PassengerCapability]? = nil,
        passengerEligibleSecurityPrograms: [TransitSecurityProgram]? = nil,
        passengerInformationSSRs: [String]? = nil,
        passengerName: SemanticTagType.PersonNameComponents? = nil,
        passengerServiceSSRs: [String]? = nil,
        priorityStatus: String? = nil,
        seats: [SemanticTagType.Seat]? = nil,
        securityScreening: String? = nil,
        silenceRequested: Bool? = nil,
        ticketFareClass: String? = nil,
        totalPrice: SemanticTagType.CurrencyAmount? = nil,
        transitProvider: String? = nil,
        transitStatus: String? = nil,
        transitStatusReason: String? = nil,
        vehicleName: String? = nil,
        vehicleNumber: String? = nil,
        vehicleType: String? = nil,
        wifiAccess: [SemanticTagType.WifiNetwork]? = nil
    ) -> Self {
        self.init(
            airlineCode: airlineCode,
            boardingGroup: boardingGroup,
            boardingSequenceNumber: boardingSequenceNumber,
            boardingZone: boardingZone,
            confirmationNumber: confirmationNumber,
            currentArrivalDate: currentArrivalDate,
            currentBoardingDate: currentBoardingDate,
            currentDepartureDate: currentDepartureDate,
            departureAirportCode: departureAirportCode,
            departureAirportName: departureAirportName,
            departureCityName: departureCityName,
            departureGate: departureGate,
            departureLocation: departureLocation,
            departureLocationDescription: departureLocationDescription,
            departureLocationSecurityPrograms: departureLocationSecurityPrograms,
            departureLocationTimeZone: departureLocationTimeZone,
            departureTerminal: departureTerminal,
            destinationAirportCode: destinationAirportCode,
            destinationAirportName: destinationAirportName,
            destinationCityName: destinationCityName,
            destinationGate: destinationGate,
            destinationLocation: destinationLocation,
            destinationLocationDescription: destinationLocationDescription,
            destinationLocationSecurityPrograms: destinationLocationSecurityPrograms,
            destinationLocationTimeZone: destinationLocationTimeZone,
            destinationTerminal: destinationTerminal,
            duration: duration,
            flightCode: flightCode,
            flightNumber: flightNumber,
            internationalDocumentsAreVerified: internationalDocumentsAreVerified,
            internationalDocumentsVerifiedDeclarationName: internationalDocumentsVerifiedDeclarationName,
            loungePlaceIDs: loungePlaceIDs,
            membershipProgramName: membershipProgramName,
            membershipProgramNumber: membershipProgramNumber,
            membershipProgramStatus: membershipProgramStatus,
            originalArrivalDate: originalArrivalDate,
            originalBoardingDate: originalBoardingDate,
            originalDepartureDate: originalDepartureDate,
            passengerAirlineSSRs: passengerAirlineSSRs,
            passengerCapabilities: passengerCapabilities,
            passengerEligibleSecurityPrograms: passengerEligibleSecurityPrograms,
            passengerInformationSSRs: passengerInformationSSRs,
            passengerName: passengerName,
            passengerServiceSSRs: passengerServiceSSRs,
            priorityStatus: priorityStatus,
            seats: seats,
            securityScreening: securityScreening,
            silenceRequested: silenceRequested,
            ticketFareClass: ticketFareClass,
            totalPrice: totalPrice,
            transitProvider: transitProvider,
            transitStatus: transitStatus,
            transitStatusReason: transitStatusReason,
            vehicleName: vehicleName,
            vehicleNumber: vehicleNumber,
            vehicleType: vehicleType,
            wifiAccess: wifiAccess
        )
    }

    public static func storeSemantics(
        balance: SemanticTagType.CurrencyAmount? = nil,
        totalPrice: SemanticTagType.CurrencyAmount? = nil,
        wifiAccess: [SemanticTagType.WifiNetwork]? = nil
    ) -> Self {
        self.init(
            balance: balance,
            totalPrice: totalPrice,
            wifiAccess: wifiAccess
        )
    }
}
